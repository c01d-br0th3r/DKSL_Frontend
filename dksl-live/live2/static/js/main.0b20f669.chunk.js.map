{"version":3,"sources":["components/GlobalStyle.tsx","components/Record.tsx","components/Scoreboard.tsx","routes/Main/index.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","reset","Away","styled","div","Home","Name","Table","table","TitleTr","tr","Pinch","span","Record","live","away","name","batterInfo","map","info","batters","batter","index","key","now","stat","AB","H","_2B","_3B","RBI","R","HR","BB","HBP","pitcherInfo","pitcher","IP","ER","SO","NP","home","ScoreContainer","TeamScore","Team","Score","VSContainer","Ground","Board","Inning","TotalScore","td","Scoreboard","useState","awayHits","setAwayHits","homeHits","setHomeHits","awayErr","setAwayErr","homeErr","setHomeErr","awayBB","setAwayBB","homeBB","setHomeBB","useEffect","awayBatterInfo","homeBatterInfo","forEach","E","totalScore","ground","split","score","s","nowInning","nowTopBottom","socket","socketio","connect","inning","BroadcastContainer","ButtonContainer","Button","button","props","disabled","NavigationContainer","Nav","Textcast","App","setLive","currentInning","setCurrentInning","isBroadcast","setIsBroadcast","emit","on","console","log","handleClick","e","target","parseInt","innerText","onClick","inn","dangerouslySetInnerHTML","__html","textCast","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b20f669.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\nimport { reset } from \"styled-reset\";\n\nconst GlobalStyle = createGlobalStyle`\n    ${reset};\n    * {\n        box-sizing: border-box;\n        font-family: 'Noto Sans KR', sans-serif !important;\n    }\n    button {\n        &:focus {\n          outline: none; \n        }\n    }\n`;\n\nexport default GlobalStyle;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport { ILive } from \"../interfaces/live\";\nimport styled from \"styled-components\";\n\ninterface IProps {\n  live: ILive;\n}\n\nconst Away = styled.div`\n  padding-bottom: 20px;\n`;\n\nconst Home = styled.div`\n  padding-bottom: 20px;\n`;\n\nconst Name = styled.div`\n  font-size: 20px;\n  font-weight: 700;\n  padding: 20px 0;\n  padding-left: 10px;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  td {\n    text-align: center;\n    padding: 10px 0;\n    padding-top: 13px;\n    font-size: 13px;\n    border-bottom: 1px solid #f2f2f2;\n  }\n`;\n\nconst TitleTr = styled.tr`\n  background-color: #2450aa;\n  color: #fff;\n  font-weight: 500;\n  font-size: 12px;\n`;\n\nconst Pinch = styled.span`\n  font-size: 10px;\n  opacity: 0.7;\n`;\n\nconst Record: React.FC<IProps> = ({ live }) => {\n  return (\n    <div>\n      <Away>\n        <Name>{live.away.name}</Name>\n        <Table>\n          <tbody>\n            <TitleTr>\n              <td></td>\n              <td>타수</td>\n              <td>안타</td>\n              <td>2루타</td>\n              <td>3루타</td>\n              <td>타점</td>\n              <td>득점</td>\n              <td>홈런</td>\n              <td>볼넷</td>\n            </TitleTr>\n            {live.away.batterInfo.map((info) => {\n              return info.batters.map((batter, index) => (\n                <tr key={index}>\n                  <td>\n                    {batter.name}{\" \"}\n                    {info.now !== 0 && index !== 0 && <Pinch>대</Pinch>}\n                  </td>\n                  <td>{batter.stat.AB}</td>\n                  <td>{batter.stat.H}</td>\n                  <td>{batter.stat._2B}</td>\n                  <td>{batter.stat._3B}</td>\n                  <td>{batter.stat.RBI}</td>\n                  <td>{batter.stat.R}</td>\n                  <td>{batter.stat.HR}</td>\n                  <td>{batter.stat.BB + batter.stat.HBP}</td>\n                </tr>\n              ));\n            })}\n          </tbody>\n        </Table>\n        <Table>\n          <tbody>\n            <TitleTr>\n              <td></td>\n              <td>이닝</td>\n              <td>자책</td>\n              <td>볼넷</td>\n              <td>삼진</td>\n              <td>피안타</td>\n              <td>투구수</td>\n            </TitleTr>\n            {live.away.pitcherInfo.map((pitcher, index) => (\n              <tr key={index}>\n                <td>{pitcher.name}</td>\n                <td>{pitcher.stat.IP}</td>\n                <td>{pitcher.stat.ER}</td>\n                <td>{pitcher.stat.BB}</td>\n                <td>{pitcher.stat.SO}</td>\n                <td>{pitcher.stat.H}</td>\n                <td>{pitcher.stat.NP}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </Away>\n      <Home>\n        <Name>{live.home.name}</Name>\n        <Table>\n          <tbody>\n            <TitleTr>\n              <td></td>\n              <td>타수</td>\n              <td>안타</td>\n              <td>2루타</td>\n              <td>3루타</td>\n              <td>타점</td>\n              <td>득점</td>\n              <td>홈런</td>\n              <td>볼넷</td>\n            </TitleTr>\n            {live.home.batterInfo.map((info) => {\n              return info.batters.map((batter, index) => (\n                <tr key={index}>\n                  <td>\n                    {batter.name}{\" \"}\n                    {info.now !== 0 && index !== 0 && <Pinch>대</Pinch>}\n                  </td>\n                  <td>{batter.stat.AB}</td>\n                  <td>{batter.stat.H}</td>\n                  <td>{batter.stat._2B}</td>\n                  <td>{batter.stat._3B}</td>\n                  <td>{batter.stat.RBI}</td>\n                  <td>{batter.stat.R}</td>\n                  <td>{batter.stat.HR}</td>\n                  <td>{batter.stat.BB + batter.stat.HBP}</td>\n                </tr>\n              ));\n            })}\n          </tbody>\n        </Table>\n        <Table>\n          <tbody>\n            <TitleTr>\n              <td></td>\n              <td>이닝</td>\n              <td>자책</td>\n              <td>볼넷</td>\n              <td>삼진</td>\n              <td>피안타</td>\n              <td>투구수</td>\n            </TitleTr>\n            {live.home.pitcherInfo.map((pitcher, index) => (\n              <tr key={index}>\n                <td>{pitcher.name}</td>\n                <td>{pitcher.stat.IP}</td>\n                <td>{pitcher.stat.ER}</td>\n                <td>{pitcher.stat.BB}</td>\n                <td>{pitcher.stat.SO}</td>\n                <td>{pitcher.stat.H}</td>\n                <td>{pitcher.stat.NP}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </Home>\n    </div>\n  );\n};\n\nexport default Record;\n","import React, { useState, useEffect } from \"react\";\nimport { ILive } from \"../interfaces/live\";\nimport styled from \"styled-components\";\n\ninterface IProps {\n  live: ILive;\n}\n\nconst ScoreContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 25px 5px;\n  background-color: #2450aa;\n  color: #fff;\n`;\n\nconst TeamScore = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Team = styled.div`\n  font-size: 15px;\n  font-weight: 600;\n  margin-bottom: 15px;\n  opacity: 0.8;\n`;\n\nconst Score = styled.div`\n  font-size: 44px;\n  font-weight: 700;\n`;\n\nconst VSContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 700;\n  position: relative;\n`;\n\nconst Ground = styled.div`\n  width: 100%;\n  position: absolute;\n  top: 25px;\n  font-size: 12px;\n  font-weight: 500;\n  opacity: 0.8;\n  text-align: center;\n`;\n\nconst Board = styled.div`\n  width: 100%;\n  background-color: #1d4aa1;\n  color: #fff;\n  padding: 10px 5px;\n  display: flex;\n  justify-content: center;\n  font-size: 14px;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  text-align: center;\n  td {\n    padding: 5px 4px;\n  }\n`;\n\nconst Inning = styled.tr`\n  opacity: 0.7;\n  td {\n    padding-bottom: 10px;\n  }\n`;\n\nconst TotalScore = styled.td`\n  color: #7efff5;\n`;\n\nconst Scoreboard: React.FC<IProps> = ({ live }) => {\n  const [awayHits, setAwayHits] = useState<number>(0);\n  const [homeHits, setHomeHits] = useState<number>(0);\n  const [awayErr, setAwayErr] = useState<number>(0);\n  const [homeErr, setHomeErr] = useState<number>(0);\n  const [awayBB, setAwayBB] = useState<number>(0);\n  const [homeBB, setHomeBB] = useState<number>(0);\n  useEffect(() => {\n    const awayBatterInfo = live.away.batterInfo;\n    const homeBatterInfo = live.home.batterInfo;\n    let awayHits = 0,\n      homeHits = 0,\n      awayErr = 0,\n      homeErr = 0,\n      awayBB = 0,\n      homeBB = 0;\n    awayBatterInfo.forEach((away) => {\n      away.batters.forEach((batter) => {\n        awayHits += batter.stat.H;\n        awayErr += batter.stat.E;\n        awayBB += batter.stat.BB;\n        awayBB += batter.stat.HBP;\n      });\n    });\n    homeBatterInfo.forEach((home) => {\n      home.batters.forEach((batter) => {\n        homeHits += batter.stat.H;\n        homeErr += batter.stat.E;\n        homeBB += batter.stat.BB;\n        homeBB += batter.stat.HBP;\n      });\n    });\n    setAwayHits(awayHits);\n    setHomeHits(homeHits);\n    setAwayErr(awayErr);\n    setHomeErr(homeErr);\n    setAwayBB(awayBB);\n    setHomeBB(homeBB);\n  }, [live]);\n  return (\n    <div>\n      <ScoreContainer>\n        <TeamScore>\n          <Team>{live.away.name}</Team>\n          <Score>{live.away.totalScore}</Score>\n        </TeamScore>\n        <VSContainer>\n          <div>VS</div>\n          <Ground>{live.ground}</Ground>\n        </VSContainer>\n        <TeamScore>\n          <Team>{live.home.name}</Team>\n          <Score>{live.home.totalScore}</Score>\n        </TeamScore>\n      </ScoreContainer>\n      <Board>\n        <Table>\n          <tbody>\n            <Inning>\n              <td></td>\n              <td>1</td>\n              <td>2</td>\n              <td>3</td>\n              <td>4</td>\n              <td>5</td>\n              <td>6</td>\n              <td>7</td>\n              <td>8</td>\n              <td>9</td>\n              <TotalScore>R</TotalScore>\n              <td>H</td>\n              <td>E</td>\n              <td>B</td>\n            </Inning>\n            <tr>\n              <td>{live.away.name.split(\" \")[0]}</td>\n              {live.away.score.map((s, index) => (\n                <td key={index}>{live.nowInning - 1 >= index ? s : \"\"}</td>\n              ))}\n              <TotalScore>{live.away.totalScore}</TotalScore>\n              <td>{awayHits}</td>\n              <td>{homeErr}</td>\n              <td>{awayBB}</td>\n            </tr>\n            <tr>\n              <td>{live.home.name.split(\" \")[0]}</td>\n              {live.home.score.map((s, index) => (\n                <td key={index}>\n                  {live.nowInning - 1 > index\n                    ? s\n                    : live.nowInning - 1 === index && live.nowTopBottom\n                    ? s\n                    : \"\"}\n                </td>\n              ))}\n              <TotalScore>{live.home.totalScore}</TotalScore>\n              <td>{homeHits}</td>\n              <td>{awayErr}</td>\n              <td>{homeBB}</td>\n            </tr>\n          </tbody>\n        </Table>\n      </Board>\n    </div>\n  );\n};\n\nexport default Scoreboard;\n","import React, { useState, useEffect } from \"react\";\nimport socketio from \"socket.io-client\";\nimport styled, { StyledComponentProps, StyledProps } from \"styled-components\";\nimport { ILive } from \"../..//interfaces/live\";\nimport Record from \"../../components/Record\";\nimport Scoreboard from \"../../components/Scoreboard\";\nimport \"./Main.css\";\n\nconst socket: any = socketio.connect(\"http://localhost:4000\");\nconst inning: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst BroadcastContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ButtonContainer = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  background-color: #5d93d2;\n  overflow: scroll;\n`;\n\nconst Button: any = styled.button`\n  width: 100%;\n  padding: 10px 0;\n  background-color: ${(props) => (props.disabled ? \"#5d93d2\" : \"#1D4AA0\")};\n  color: #fff;\n  font-weight: 600;\n  opacity: ${(props) => (props.disabled ? \"0.7\" : \"1\")};\n  border: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: ${(props) => (props.disabled ? \"default\" : \"pointer\")}; ;\n`;\n\nconst NavigationContainer = styled.div`\n  width: 100%;\n  display: flex;\n`;\n\nconst Nav: any = styled.button`\n  width: 100%;\n  background-color: #2450aa;\n  border: none;\n  padding: 10px;\n  color: #fff;\n  font-weight: 500;\n  cursor: pointer;\n`;\n\nconst Textcast = styled.div`\n  padding: 10px;\n`;\n\nconst App = () => {\n  const [live, setLive] = useState<ILive | null>(null);\n  const [currentInning, setCurrentInning] = useState<number>(-1);\n  const [isBroadcast, setIsBroadcast] = useState<boolean>(true);\n  useEffect(() => {\n    socket.emit(\"joinLive\", 0);\n    socket.emit(\"getLiveCast\", 0);\n    // 전송 누를 때마다\n    socket.on(\"sendLiveCast\", (live: ILive) => {\n      console.log(live);\n      setLive(live);\n      setCurrentInning(live.nowInning);\n    });\n    socket.on(\"liveCast\", (live: ILive) => {\n      console.log(live);\n      setLive(live);\n      setCurrentInning(live.nowInning);\n    });\n  }, []);\n  const handleClick = (e: any) => {\n    const target = e.target as HTMLButtonElement;\n    setCurrentInning(parseInt(target.innerText));\n  };\n  useEffect(() => {\n    console.log(currentInning);\n  }, [currentInning]);\n  return (\n    <div>\n      {live === null ? (\n        <div>No Game</div>\n      ) : (\n        <>\n          <Scoreboard live={{ ...live }} />\n          <NavigationContainer>\n            <Nav onClick={() => setIsBroadcast(true)}>중계</Nav>\n            <Nav onClick={() => setIsBroadcast(false)}>기록</Nav>\n          </NavigationContainer>\n          {isBroadcast ? (\n            <BroadcastContainer>\n              <ButtonContainer>\n                {inning.map((inn) => (\n                  <Button\n                    inning={inn}\n                    key={inn}\n                    onClick={handleClick}\n                    disabled={live.nowInning < inn}\n                  >\n                    {`${inn}회`}\n                  </Button>\n                ))}\n              </ButtonContainer>\n              <Textcast\n                dangerouslySetInnerHTML={{\n                  __html:\n                    currentInning === -1\n                      ? live.textCast[0]\n                      : live.textCast[currentInning - 1],\n                }}\n              />\n            </BroadcastContainer>\n          ) : (\n            <Record live={live} />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport Router from \"./Router\";\nimport GlobalStyle from \"./GlobalStyle\";\nimport Main from \"../routes/Main\";\n\nconst App: React.FC<{}> = () => {\n  return (\n    <>\n      <GlobalStyle />\n      <Main />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}